{
  "address": "0xD5361e341c3FbEb5f36f8c89940A9E55bdf22e23",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IGaslessEntryPoint",
          "name": "_entryPoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "extraUnstakeDelaySec",
          "type": "uint32"
        }
      ],
      "name": "addStake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "entryPoint",
      "outputs": [
        {
          "internalType": "contract IGaslessEntryPoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTokenValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paymentToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IGaslessPaymaster.PostOpMode",
          "name": "mode",
          "type": "uint8"
        },
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "actualGasCost",
          "type": "uint256"
        }
      ],
      "name": "postOp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IGaslessEntryPoint",
          "name": "_entryPoint",
          "type": "address"
        }
      ],
      "name": "setEntryPoint",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unlockStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rate",
              "type": "uint256"
            }
          ],
          "internalType": "struct GaslessERC20Paymaster.PaymentToken",
          "name": "_paymentToken",
          "type": "tuple"
        }
      ],
      "name": "updatePaymentToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "callContract",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "callData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "callGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "verificationGasLimit",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxPriorityFeePerGas",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "paymasterAndData",
              "type": "bytes"
            }
          ],
          "internalType": "struct UserOperation",
          "name": "userOp",
          "type": "tuple"
        }
      ],
      "name": "validatePaymasterUserOp",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "context",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        }
      ],
      "name": "withdrawStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "withdrawAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a89a1f1a6538ab44c07e89d542c32c4db87e84503e6df0fff5c372d229ebc79",
  "receipt": {
    "to": null,
    "from": "0xA64FC11A58453441872A867b1788319F20760E6c",
    "contractAddress": "0xD5361e341c3FbEb5f36f8c89940A9E55bdf22e23",
    "transactionIndex": 0,
    "gasUsed": "276272",
    "logsBloom": "0x
    "blockHash": "0x8a9eda153291b9847e498eef111805dad2a80d74bdada62314163559a07c269e",
    "transactionHash": "0x1a89a1f1a6538ab44c07e89d542c32c4db87e84503e6df0fff5c372d229ebc79",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1469186,
        "transactionHash": "0x1a89a1f1a6538ab44c07e89d542c32c4db87e84503e6df0fff5c372d229ebc79",
        "address": "0xD5361e341c3FbEb5f36f8c89940A9E55bdf22e23",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000a64fc11a58453441872a867b1788319f20760e6c"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000",
        "logIndex": 0,
        "blockHash": "0x8a9eda153291b9847e498eef111805dad2a80d74bdada62314163559a07c269e"
      }
    ],
    "blockNumber": 1469186,
    "cumulativeGasUsed": "276272",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x791ec459f57362256f313f5512bdb9f6d7cae308"
  ],
  "numDeployments": 1,
  "solcInputHash": "610f7e3175da272e7beea43f939f1ae5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IGaslessEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"extraUnstakeDelaySec\",\"type\":\"uint32\"}],\"name\":\"addStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"entryPoint\",\"outputs\":[{\"internalType\":\"contract IGaslessEntryPoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paymentToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IGaslessPaymaster.PostOpMode\",\"name\":\"mode\",\"type\":\"uint8\"},{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"actualGasCost\",\"type\":\"uint256\"}],\"name\":\"postOp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IGaslessEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"}],\"name\":\"setEntryPoint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unlockStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"internalType\":\"struct GaslessERC20Paymaster.PaymentToken\",\"name\":\"_paymentToken\",\"type\":\"tuple\"}],\"name\":\"updatePaymentToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"callContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"callGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"verificationGasLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPriorityFeePerGas\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"paymasterAndData\",\"type\":\"bytes\"}],\"internalType\":\"struct UserOperation\",\"name\":\"userOp\",\"type\":\"tuple\"}],\"name\":\"validatePaymasterUserOp\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"context\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"withdrawAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addStake(uint32)\":{\"params\":{\"extraUnstakeDelaySec\":\"- set the stake to the entrypoint's default unstakeDelay plus this value.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"postOp(uint8,bytes,uint256)\":{\"params\":{\"actualGasCost\":\"- actual gas used so far (without this postOp call).\",\"context\":\"- the context value returned by validatePaymasterUserOp\",\"mode\":\"enum with the following options:      opSucceeded - user operation succeeded.      opReverted  - user op reverted. still has to pay for gas.      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.                       Now this is the 2nd call, after user's op was deliberately reverted.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdrawStake(address)\":{\"params\":{\"withdrawAddress\":\"the address to send withdrawn value.\"}},\"withdrawTo(address,uint256)\":{\"params\":{\"amount\":\"to withdraw\",\"withdrawAddress\":\"target to send to\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addStake(uint32)\":{\"notice\":\"add stake for this paymaster. This method can also carry eth value to add to the current stake.\"},\"deposit()\":{\"notice\":\"add a deposit for this paymaster, used for paying for transaction fees\"},\"getDeposit()\":{\"notice\":\"return current paymaster's deposit on the entryPoint.\"},\"postOp(uint8,bytes,uint256)\":{\"notice\":\"post-operation handler. Must verify sender is the entryPoint\"},\"unlockStake()\":{\"notice\":\"unlock the stake, in order to withdraw it. The paymaster can't serve requests once unlocked, until it calls addStake again\"},\"validatePaymasterUserOp((address,bytes,uint256,uint256,uint256,uint256,bytes))\":{\"notice\":\"verify our external signer signed this request. the \\\"paymasterAndData\\\" is expected to be the paymaster and a signature over the entire request params\"},\"withdrawStake(address)\":{\"notice\":\"withdraw the entire paymaster's stake. stake must be unlocked first (and then wait for the unstakeDelay to be over)\"},\"withdrawTo(address,uint256)\":{\"notice\":\"withdraw value from the deposit\"}},\"notice\":\"A sample paymaster that uses external service to decide whether to pay for the UserOp. The paymaster trusts an external signer to sign the transaction. The calling user must pass the UserOp to that external signer first, which performs whatever off-chain verification before signing the UserOp. Note that this signature is NOT a replacement for wallet signature: - the paymaster signs to agree to PAY for GAS. - the wallet signs to prove identity and wallet ownership.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GaslessERC20Paymaster.sol\":\"GaslessERC20Paymaster\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/GaslessBasePaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4;\\n\\n/* solhint-disable reason-string */\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IGaslessPaymaster.sol\\\";\\nimport \\\"./interfaces/IGaslessEntryPoint.sol\\\";\\n\\n/**\\n * Helper class for creating a paymaster.\\n * provides helper methods for staking.\\n * validates that the postOp is called only by the entryPoint\\n */\\nabstract contract GaslessBasePaymaster is IGaslessPaymaster, Ownable {\\n    IGaslessEntryPoint public entryPoint;\\n\\n    constructor(IGaslessEntryPoint _entryPoint) {\\n        setEntryPoint(_entryPoint);\\n    }\\n\\n    function setEntryPoint(IGaslessEntryPoint _entryPoint) public onlyOwner {\\n        entryPoint = _entryPoint;\\n    }\\n\\n    function validatePaymasterUserOp(UserOperation calldata userOp)\\n        external\\n        virtual\\n        override\\n        returns (bytes memory context, uint256 deadline);\\n\\n    function postOp(\\n        PostOpMode mode,\\n        bytes calldata context,\\n        uint256 actualGasCost\\n    ) external override {\\n        _requireFromEntryPoint();\\n        _postOp(mode, context, actualGasCost);\\n    }\\n\\n    /**\\n     * post-operation handler.\\n     * (verified to be called only through the entryPoint)\\n     * @dev if subclass returns a non-empty context from validatePaymasterUserOp, it must also implement this method.\\n     * @param mode enum with the following options:\\n     *      opSucceeded - user operation succeeded.\\n     *      opReverted  - user op reverted. still has to pay for gas.\\n     *      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\\n     *                       Now this is the 2nd call, after user's op was deliberately reverted.\\n     * @param context - the context value returned by validatePaymasterUserOp\\n     * @param actualGasCost - actual gas used so far (without this postOp call).\\n     */\\n    function _postOp(\\n        PostOpMode mode,\\n        bytes calldata context,\\n        uint256 actualGasCost\\n    ) internal virtual {\\n        (mode, context, actualGasCost); // unused params\\n        // subclass must override this method if validatePaymasterUserOp returns a context\\n        revert(\\\"must override\\\");\\n    }\\n\\n    /**\\n     * add a deposit for this paymaster, used for paying for transaction fees\\n     */\\n    function deposit() public payable {\\n        entryPoint.depositTo{value: msg.value}(address(this));\\n    }\\n\\n    /**\\n     * withdraw value from the deposit\\n     * @param withdrawAddress target to send to\\n     * @param amount to withdraw\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 amount)\\n        public\\n        onlyOwner\\n    {\\n        entryPoint.withdrawTo(withdrawAddress, amount);\\n    }\\n\\n    /**\\n     * add stake for this paymaster.\\n     * This method can also carry eth value to add to the current stake.\\n     * @param extraUnstakeDelaySec - set the stake to the entrypoint's default unstakeDelay plus this value.\\n     */\\n    function addStake(uint32 extraUnstakeDelaySec) external payable onlyOwner {\\n        entryPoint.addStake{value: msg.value}(\\n            entryPoint.unstakeDelaySec() + extraUnstakeDelaySec\\n        );\\n    }\\n\\n    /**\\n     * return current paymaster's deposit on the entryPoint.\\n     */\\n    function getDeposit() public view returns (uint256) {\\n        return entryPoint.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * unlock the stake, in order to withdraw it.\\n     * The paymaster can't serve requests once unlocked, until it calls addStake again\\n     */\\n    function unlockStake() external onlyOwner {\\n        entryPoint.unlockStake();\\n    }\\n\\n    /**\\n     * withdraw the entire paymaster's stake.\\n     * stake must be unlocked first (and then wait for the unstakeDelay to be over)\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external onlyOwner {\\n        entryPoint.withdrawStake(withdrawAddress);\\n    }\\n\\n    /// validate the call is made from a valid entrypoint\\n    function _requireFromEntryPoint() internal view virtual {\\n        require(msg.sender == address(entryPoint));\\n    }\\n}\\n\",\"keccak256\":\"0x8fbff8da7f769f3ed2580a2ed25c98addb88a1c05ec4198c42a6c0c03aed0af2\",\"license\":\"GPL-3.0\"},\"contracts/GaslessERC20Paymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4;\\n\\n/* solhint-disable reason-string */\\n\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"solidity-rlp/contracts/RLPReader.sol\\\";\\n\\nimport \\\"./GaslessBasePaymaster.sol\\\";\\n\\n/**\\n * A sample paymaster that uses external service to decide whether to pay for the UserOp.\\n * The paymaster trusts an external signer to sign the transaction.\\n * The calling user must pass the UserOp to that external signer first, which performs\\n * whatever off-chain verification before signing the UserOp.\\n * Note that this signature is NOT a replacement for wallet signature:\\n * - the paymaster signs to agree to PAY for GAS.\\n * - the wallet signs to prove identity and wallet ownership.\\n */\\ncontract GaslessERC20Paymaster is GaslessBasePaymaster {\\n    using ECDSA for bytes32;\\n    using UserOperationLib for UserOperation;\\n    using SafeERC20 for IERC20;\\n    using RLPReader for bytes;\\n    using RLPReader for RLPReader.RLPItem;\\n\\n    struct PaymentToken {\\n        address token;\\n        uint256 rate;\\n    }\\n\\n    PaymentToken public paymentToken;\\n\\n    constructor(IGaslessEntryPoint _entryPoint)\\n        GaslessBasePaymaster(_entryPoint)\\n    {}\\n\\n    function updatePaymentToken(PaymentToken calldata _paymentToken)\\n        public\\n        onlyOwner\\n    {\\n        paymentToken = _paymentToken;\\n    }\\n\\n    function getTokenValue() public view returns (uint256) {\\n        // NOTE: Could be obtained from the oracle/dex or arbitary rate\\n        return paymentToken.rate;\\n    }\\n\\n    function bytesToBytes32(bytes memory b, uint256 offset)\\n        private\\n        pure\\n        returns (bytes32)\\n    {\\n        bytes32 out;\\n\\n        for (uint256 i = 0; i < 32; i++) {\\n            out |= bytes32(b[offset + i] & 0xFF) >> (i * 8);\\n        }\\n        return out;\\n    }\\n\\n    /**\\n     * verify our external signer signed this request.\\n     * the \\\"paymasterAndData\\\" is expected to be the paymaster and a signature over the entire request params\\n     */\\n    function validatePaymasterUserOp(UserOperation calldata userOp)\\n        external\\n        override\\n        returns (bytes memory context, uint256 deadline)\\n    {\\n        super._requireFromEntryPoint();\\n\\n        require(\\n            userOp.maxFeePerGas == userOp.maxPriorityFeePerGas,\\n            \\\"GP: USELESS_CHECK\\\"\\n        );\\n\\n        uint256 value = getTokenValue();\\n\\n        bytes memory data = userOp.paymasterAndData[20:];\\n\\n        RLPReader.RLPItem[] memory dataRLPList = data.toRlpItem().toList();\\n\\n        uint256 opDeadline = dataRLPList[0].toUint();\\n        require(opDeadline > block.timestamp, \\\"GP: WRONG_DEADLINE\\\");\\n\\n        uint8 opV = uint8(dataRLPList[1].toUint());\\n        bytes32 opR = bytesToBytes32(dataRLPList[2].toBytes(), 32);\\n        bytes32 opS = bytesToBytes32(dataRLPList[3].toBytes(), 32);\\n\\n        IERC20Permit(paymentToken.token).permit(\\n            tx.origin,\\n            address(this),\\n            value,\\n            opDeadline,\\n            opV,\\n            opR,\\n            opS\\n        );\\n        IERC20(paymentToken.token).safeTransferFrom(\\n            tx.origin,\\n            address(this),\\n            value\\n        );\\n        return (\\\"\\\", 0);\\n    }\\n}\\n\",\"keccak256\":\"0x705e1035f25bb0e9b8dfe1506519a80b47bffcb836918d3791e96e97f9b3bc26\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/GaslessUserOperartion.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4;\\n\\n/* solhint-disable no-inline-assembly */\\n\\n/**\\n * User Operation struct\\n * @param callContract the contract address user wants to call execution.\\n * @param callData the method call to execute on callContract contract.\\n * @param callGasLimit the max gas limit for method call to execute on callContract contract.\\n * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp\\n * @param maxFeePerGas same as EIP-1559 gas parameter\\n * @param maxPriorityFeePerGas same as EIP-1559 gas parameter\\n * @param paymasterAndData if set, this field hold the paymaster address and \\\"paymaster-specific-data\\\". the paymaster will pay for the transaction instead of the sender\\n */\\nstruct UserOperation {\\n    address callContract;\\n    bytes callData;\\n    uint256 callGasLimit;\\n    uint256 verificationGasLimit;\\n    uint256 maxFeePerGas;\\n    uint256 maxPriorityFeePerGas;\\n    bytes paymasterAndData;\\n}\\n\\nlibrary UserOperationLib {\\n    //relayer/miner might submit the TX with higher priorityFee, but the user should not\\n    // pay above what he signed for.\\n    function gasPrice(UserOperation calldata userOp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        unchecked {\\n            uint256 maxFeePerGas = userOp.maxFeePerGas;\\n            uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\n            if (maxFeePerGas == maxPriorityFeePerGas) {\\n                //legacy mode (for networks that don't support basefee opcode)\\n                return maxFeePerGas;\\n            }\\n            return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\n        }\\n    }\\n\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n}\\n\",\"keccak256\":\"0x325daa239bc03f1adca85e4c035a62897ca5937a590254850379ce374ed10045\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGaslessEntryPoint.sol\":{\"content\":\"/**\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\n ** Only one instance required on each chain.\\n **/\\n// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4;\\n\\n/* solhint-disable avoid-low-level-calls */\\n/* solhint-disable no-inline-assembly */\\n/* solhint-disable reason-string */\\n\\nimport \\\"./GaslessUserOperartion.sol\\\";\\nimport \\\"./IStakeManager.sol\\\";\\n\\ninterface IGaslessEntryPoint is IStakeManager {\\n    /***\\n     * An event emitted after each successful request\\n     * @param sender - the user that sends this request and asking for sponsor\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\n     * @param actualGasCost - the total cost (in gas) of this request.\\n     * @param actualGasPrice - the actual gas price the sender agreed to pay.\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\n     */\\n    event UserOperationEvent(\\n        address indexed sender,\\n        address indexed paymaster,\\n        uint256 actualGasCost,\\n        uint256 actualGasPrice,\\n        bool success\\n    );\\n\\n    /**\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\n     * @param sender the sender of this request\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\n     */\\n    event UserOperationRevertReason(address indexed sender, bytes revertReason);\\n\\n    /**\\n     * a custom revert error of handleOp, to identify the offending op.\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\n     *  @param paymaster - if paymaster.validatePaymasterUserOp fails, this will be the paymaster's address. if validateUserOp failed,\\n     *       this value will be zero (since it failed before accessing the paymaster)\\n     *  @param reason - revert reason\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of wallet/paymaster reverts.\\n     */\\n    error FailedOp(address paymaster, string reason);\\n\\n    /**\\n     * Execute a UserOperation.\\n     * @param op the operations to execute\\n     */\\n    function handleOp(UserOperation calldata op) external;\\n\\n    /**\\n     * Simulate a call to paymaster.validatePaymasterUserOp.\\n     * Validation succeeds if the call doesn't revert.\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the wallet's data.\\n     *      In order to split the running opcodes of the wallet (validateUserOp) from the paymaster's validatePaymasterUserOp,\\n     *      it should look for the NUMBER opcode at depth=1 (which itself is a banned opcode)\\n     * @param userOp the user operation to validate.\\n     * @return preOpGas total gas used by validation (aka. gasUsedBeforeOperation)\\n     * @return prefund the amount the paymaster had to prefund\\n     * @return deadline until what time this userOp is valid (paymaster's deadline)\\n     */\\n    function simulateValidation(UserOperation calldata userOp)\\n        external\\n        returns (\\n            uint256 preOpGas,\\n            uint256 prefund,\\n            uint256 deadline\\n        );\\n\\n    function getDepositInfo(address account)\\n        external\\n        view\\n        returns (DepositInfo memory info);\\n}\\n\",\"keccak256\":\"0x701c976f905900d6e4a9969e54b93eea0394453e37e6f2cd7506c122671684dc\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGaslessPaymaster.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.4;\\n\\nimport \\\"./GaslessUserOperartion.sol\\\";\\n\\n/**\\n * the interface exposed by a paymaster contract, who agrees to pay the gas for user's operations.\\n * a paymaster must hold a stake to cover the required entrypoint stake and also the gas for the transaction.\\n */\\ninterface IGaslessPaymaster {\\n    /**\\n     * payment validation: check if paymaster agree to pay.\\n     * Must verify sender is the entryPoint.\\n     * Revert to reject this request.\\n     * Note that bundlers will reject this method if it changes the state, unless the paymaster is trusted (whitelisted)\\n     * The paymaster pre-pays using its deposit, and receive back a refund after the postOp method returns.\\n     * @param userOp the user operation\\n     * @return context value to send to a postOp\\n     *  zero length to signify postOp is not required.\\n     * @return deadline the last block timestamp this operation is valid, or zero if it is valid indefinitely.\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\n     */\\n    function validatePaymasterUserOp(UserOperation calldata userOp)\\n        external\\n        returns (bytes memory context, uint256 deadline);\\n\\n    /**\\n     * post-operation handler.\\n     * Must verify sender is the entryPoint\\n     * @param mode enum with the following options:\\n     *      opSucceeded - user operation succeeded.\\n     *      opReverted  - user op reverted. still has to pay for gas.\\n     *      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.\\n     *                       Now this is the 2nd call, after user's op was deliberately reverted.\\n     * @param context - the context value returned by validatePaymasterUserOp\\n     * @param actualGasCost - actual gas used so far (without this postOp call).\\n     */\\n    function postOp(\\n        PostOpMode mode,\\n        bytes calldata context,\\n        uint256 actualGasCost\\n    ) external;\\n\\n    enum PostOpMode {\\n        opSucceeded, // user op succeeded\\n        opReverted, // user op reverted. still has to pay for gas.\\n        postOpReverted //user op succeeded, but caused postOp to revert. Now its a 2nd call, after user's op was deliberately reverted.\\n    }\\n}\\n\",\"keccak256\":\"0xf3c4cb11ed15b1c26a23278159eca006cad20ede1da5d940db6385aa17382ac5\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.4;\\n\\n/**\\n * manage deposits and stakes.\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or a wallet)\\n * stake is value locked for at least \\\"unstakeDelay\\\" by a paymaster.\\n */\\ninterface IStakeManager {\\n    event Deposited(address indexed account, uint256 totalDeposit);\\n\\n    event Withdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeLocked(\\n        address indexed account,\\n        uint256 totalStaked,\\n        uint256 withdrawTime\\n    );\\n\\n    /// Emitted once a stake is scheduled for withdrawal\\n    event StakeUnlocked(address indexed account, uint256 withdrawTime);\\n\\n    event StakeWithdrawn(\\n        address indexed account,\\n        address withdrawAddress,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * minimum time (in seconds) required to lock a paymaster stake before it can be withdraw.\\n     */\\n    function unstakeDelaySec() external returns (uint32);\\n\\n    /**\\n     * minimum value required to stake for a paymaster\\n     */\\n    function paymasterStake() external returns (uint256);\\n\\n    /**\\n     * @param deposit the account's deposit\\n     * @param staked true if this account is staked as a paymaster\\n     * @param stake actual amount of ether staked for this paymaster. must be above paymasterStake\\n     * @param unstakeDelaySec minimum delay to withdraw the stake. must be above the global unstakeDelaySec\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\n     * @dev sizes were chosen so that (deposit,staked) fit into one cell (used during handleOps)\\n     *    and the rest fit into a 2nd cell.\\n     *    112 bit allows for 2^15 eth\\n     *    64 bit for full timestamp\\n     *    32 bit allow 150 years for unstake delay\\n     */\\n    struct DepositInfo {\\n        uint112 deposit;\\n        bool staked;\\n        uint112 stake;\\n        uint32 unstakeDelaySec;\\n        uint64 withdrawTime;\\n    }\\n\\n    function getDepositInfo(address account)\\n        external\\n        view\\n        returns (DepositInfo memory info);\\n\\n    /// return the deposit (for gas payment) of the account\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * add to the deposit of the given account\\n     */\\n    function depositTo(address account) external payable;\\n\\n    /**\\n     * add to the account's stake - amount and delay\\n     * any pending unstake is first cancelled.\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\n     */\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\n\\n    /**\\n     * attempt to unlock the stake.\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\n     */\\n    function unlockStake() external;\\n\\n    /**\\n     * withdraw from the (unlocked) stake.\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\n     * @param withdrawAddress the address to send withdrawn value.\\n     */\\n    function withdrawStake(address payable withdrawAddress) external;\\n\\n    /**\\n     * withdraw from the deposit.\\n     * @param withdrawAddress the address to send withdrawn value.\\n     * @param withdrawAmount the amount to withdraw.\\n     */\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount)\\n        external;\\n}\\n\",\"keccak256\":\"0x689a70628afbb2b4a2806efa4c1aa7ec0b613876fbc7a49462f8d5967a8e5efb\",\"license\":\"GPL-3.0-only\"},\"solidity-rlp/contracts/RLPReader.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\n/*\\n * @author Hamdi Allam hamdi.allam97@gmail.com\\n * Please reach out with any questions or concerns\\n */\\npragma solidity >=0.5.10 <0.8.17;\\n\\nlibrary RLPReader {\\n    uint8 constant STRING_SHORT_START = 0x80;\\n    uint8 constant STRING_LONG_START = 0xb8;\\n    uint8 constant LIST_SHORT_START = 0xc0;\\n    uint8 constant LIST_LONG_START = 0xf8;\\n    uint8 constant WORD_SIZE = 32;\\n\\n    struct RLPItem {\\n        uint256 len;\\n        uint256 memPtr;\\n    }\\n\\n    struct Iterator {\\n        RLPItem item; // Item that's being iterated over.\\n        uint256 nextPtr; // Position of the next item in the list.\\n    }\\n\\n    /*\\n     * @dev Returns the next element in the iteration. Reverts if it has not next element.\\n     * @param self The iterator.\\n     * @return The next element in the iteration.\\n     */\\n    function next(Iterator memory self) internal pure returns (RLPItem memory) {\\n        require(hasNext(self));\\n\\n        uint256 ptr = self.nextPtr;\\n        uint256 itemLength = _itemLength(ptr);\\n        self.nextPtr = ptr + itemLength;\\n\\n        return RLPItem(itemLength, ptr);\\n    }\\n\\n    /*\\n     * @dev Returns true if the iteration has more elements.\\n     * @param self The iterator.\\n     * @return true if the iteration has more elements.\\n     */\\n    function hasNext(Iterator memory self) internal pure returns (bool) {\\n        RLPItem memory item = self.item;\\n        return self.nextPtr < item.memPtr + item.len;\\n    }\\n\\n    /*\\n     * @param item RLP encoded bytes\\n     */\\n    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {\\n        uint256 memPtr;\\n        assembly {\\n            memPtr := add(item, 0x20)\\n        }\\n\\n        return RLPItem(item.length, memPtr);\\n    }\\n\\n    /*\\n     * @dev Create an iterator. Reverts if item is not a list.\\n     * @param self The RLP item.\\n     * @return An 'Iterator' over the item.\\n     */\\n    function iterator(RLPItem memory self) internal pure returns (Iterator memory) {\\n        require(isList(self));\\n\\n        uint256 ptr = self.memPtr + _payloadOffset(self.memPtr);\\n        return Iterator(self, ptr);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function rlpLen(RLPItem memory item) internal pure returns (uint256) {\\n        return item.len;\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     * @return (memPtr, len) pair: location of the item's payload in memory.\\n     */\\n    function payloadLocation(RLPItem memory item) internal pure returns (uint256, uint256) {\\n        uint256 offset = _payloadOffset(item.memPtr);\\n        uint256 memPtr = item.memPtr + offset;\\n        uint256 len = item.len - offset; // data length\\n        return (memPtr, len);\\n    }\\n\\n    /*\\n     * @param the RLP item.\\n     */\\n    function payloadLen(RLPItem memory item) internal pure returns (uint256) {\\n        (, uint256 len) = payloadLocation(item);\\n        return len;\\n    }\\n\\n    /*\\n     * @param the RLP item containing the encoded list.\\n     */\\n    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory) {\\n        require(isList(item));\\n\\n        uint256 items = numItems(item);\\n        RLPItem[] memory result = new RLPItem[](items);\\n\\n        uint256 memPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 dataLen;\\n        for (uint256 i = 0; i < items; i++) {\\n            dataLen = _itemLength(memPtr);\\n            result[i] = RLPItem(dataLen, memPtr);\\n            memPtr = memPtr + dataLen;\\n        }\\n\\n        return result;\\n    }\\n\\n    // @return indicator whether encoded payload is a list. negate this function call for isData.\\n    function isList(RLPItem memory item) internal pure returns (bool) {\\n        if (item.len == 0) return false;\\n\\n        uint8 byte0;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < LIST_SHORT_START) return false;\\n        return true;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toRlpBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of RLP encoded bytes.\\n     */\\n    function rlpBytesKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        uint256 ptr = item.memPtr;\\n        uint256 len = item.len;\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(ptr, len)\\n        }\\n        return result;\\n    }\\n\\n    /*\\n     * @dev A cheaper version of keccak256(toBytes(item)) that avoids copying memory.\\n     * @return keccak256 hash of the item payload.\\n     */\\n    function payloadKeccak256(RLPItem memory item) internal pure returns (bytes32) {\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes32 result;\\n        assembly {\\n            result := keccak256(memPtr, len)\\n        }\\n        return result;\\n    }\\n\\n    /** RLPItem conversions into data types **/\\n\\n    // @returns raw rlp encoding in bytes\\n    function toRlpBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        bytes memory result = new bytes(item.len);\\n        if (result.length == 0) return result;\\n\\n        uint256 ptr;\\n        assembly {\\n            ptr := add(0x20, result)\\n        }\\n\\n        copy(item.memPtr, ptr, item.len);\\n        return result;\\n    }\\n\\n    // any non-zero byte except \\\"0x80\\\" is considered true\\n    function toBoolean(RLPItem memory item) internal pure returns (bool) {\\n        require(item.len == 1);\\n        uint256 result;\\n        uint256 memPtr = item.memPtr;\\n        assembly {\\n            result := byte(0, mload(memPtr))\\n        }\\n\\n        // SEE Github Issue #5.\\n        // Summary: Most commonly used RLP libraries (i.e Geth) will encode\\n        // \\\"0\\\" as \\\"0x80\\\" instead of as \\\"0\\\". We handle this edge case explicitly\\n        // here.\\n        if (result == 0 || result == STRING_SHORT_START) {\\n            return false;\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    function toAddress(RLPItem memory item) internal pure returns (address) {\\n        // 1 byte for the length prefix\\n        require(item.len == 21);\\n\\n        return address(uint160(toUint(item)));\\n    }\\n\\n    function toUint(RLPItem memory item) internal pure returns (uint256) {\\n        require(item.len > 0 && item.len <= 33);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n\\n        uint256 result;\\n        assembly {\\n            result := mload(memPtr)\\n\\n            // shift to the correct location if neccesary\\n            if lt(len, 32) {\\n                result := div(result, exp(256, sub(32, len)))\\n            }\\n        }\\n\\n        return result;\\n    }\\n\\n    // enforces 32 byte length\\n    function toUintStrict(RLPItem memory item) internal pure returns (uint256) {\\n        // one byte prefix\\n        require(item.len == 33);\\n\\n        uint256 result;\\n        uint256 memPtr = item.memPtr + 1;\\n        assembly {\\n            result := mload(memPtr)\\n        }\\n\\n        return result;\\n    }\\n\\n    function toBytes(RLPItem memory item) internal pure returns (bytes memory) {\\n        require(item.len > 0);\\n\\n        (uint256 memPtr, uint256 len) = payloadLocation(item);\\n        bytes memory result = new bytes(len);\\n\\n        uint256 destPtr;\\n        assembly {\\n            destPtr := add(0x20, result)\\n        }\\n\\n        copy(memPtr, destPtr, len);\\n        return result;\\n    }\\n\\n    /*\\n     * Private Helpers\\n     */\\n\\n    // @return number of payload items inside an encoded list.\\n    function numItems(RLPItem memory item) private pure returns (uint256) {\\n        if (item.len == 0) return 0;\\n\\n        uint256 count = 0;\\n        uint256 currPtr = item.memPtr + _payloadOffset(item.memPtr);\\n        uint256 endPtr = item.memPtr + item.len;\\n        while (currPtr < endPtr) {\\n            currPtr = currPtr + _itemLength(currPtr); // skip over an item\\n            count++;\\n        }\\n\\n        return count;\\n    }\\n\\n    // @return entire rlp item byte length\\n    function _itemLength(uint256 memPtr) private pure returns (uint256) {\\n        uint256 itemLen;\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            itemLen = 1;\\n        } else if (byte0 < STRING_LONG_START) {\\n            itemLen = byte0 - STRING_SHORT_START + 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            assembly {\\n                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is\\n                memPtr := add(memPtr, 1) // skip over the first byte\\n\\n                /* 32 byte word size */\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        } else if (byte0 < LIST_LONG_START) {\\n            itemLen = byte0 - LIST_SHORT_START + 1;\\n        } else {\\n            assembly {\\n                let byteLen := sub(byte0, 0xf7)\\n                memPtr := add(memPtr, 1)\\n\\n                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length\\n                itemLen := add(dataLen, add(byteLen, 1))\\n            }\\n        }\\n\\n        return itemLen;\\n    }\\n\\n    // @return number of bytes until the data\\n    function _payloadOffset(uint256 memPtr) private pure returns (uint256) {\\n        uint256 byte0;\\n        assembly {\\n            byte0 := byte(0, mload(memPtr))\\n        }\\n\\n        if (byte0 < STRING_SHORT_START) {\\n            return 0;\\n        } else if (byte0 < STRING_LONG_START || (byte0 >= LIST_SHORT_START && byte0 < LIST_LONG_START)) {\\n            return 1;\\n        } else if (byte0 < LIST_SHORT_START) {\\n            // being explicit\\n            return byte0 - (STRING_LONG_START - 1) + 1;\\n        } else {\\n            return byte0 - (LIST_LONG_START - 1) + 1;\\n        }\\n    }\\n\\n    /*\\n     * @param src Pointer to source\\n     * @param dest Pointer to destination\\n     * @param len Amount of memory to copy from the source\\n     */\\n    function copy(uint256 src, uint256 dest, uint256 len) private pure {\\n        if (len == 0) return;\\n\\n        // copy as many word sizes as possible\\n        for (; len >= WORD_SIZE; len -= WORD_SIZE) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n\\n            src += WORD_SIZE;\\n            dest += WORD_SIZE;\\n        }\\n\\n        if (len > 0) {\\n            // left over bytes. Mask is used to remove unwanted bytes from the word\\n            uint256 mask = 256**(WORD_SIZE - len) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask)) // zero out src\\n                let destpart := and(mload(dest), mask) // retrieve the bytes\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc106b888b8bb301081a037408f72a12ab4f711d90f535a66b86c31fcdad07b94\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002d6d38038062002d6d8339818101604052810190620000379190620002c9565b80620000586200004c6200007160201b60201c565b6200007960201b60201c565b62000069816200013d60201b60201c565b50506200037e565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6200014d6200019160201b60201c565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b620001a16200007160201b60201c565b73ffffffffffffffffffffffffffffffffffffffff16620001c76200022260201b60201c565b73ffffffffffffffffffffffffffffffffffffffff161462000220576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040162000217906200035c565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200027d8262000250565b9050919050565b6000620002918262000270565b9050919050565b620002a38162000284565b8114620002af57600080fd5b50565b600081519050620002c38162000298565b92915050565b600060208284031215620002e257620002e16200024b565b5b6000620002f284828501620002b2565b91505092915050565b600082825260208201905092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600062000344602083620002fb565b915062000351826200030c565b602082019050919050565b60006020820190508181036000830152620003778162000335565b9050919050565b6129df806200038e6000396000f3fe6080604052600436106100f35760003560e01c80638da5cb5b1161008a578063c23a5cea11610059578063c23a5cea146102d1578063c399ec88146102fa578063d0e30db014610325578063f2fde38b1461032f576100f3565b80638da5cb5b1461023b578063a9a2340914610266578063b0d691fe1461028f578063bb9fe6bf146102ba576100f3565b8063321a1567116100c6578063321a156714610194578063584465f2146101d2578063715018a6146101fb578063772dbdf714610212576100f3565b80630396cb60146100f857806306ffce5314610114578063205c28781461013f5780633013ce2914610168575b600080fd5b610112600480360381019061010d919061178e565b610358565b005b34801561012057600080fd5b5061012961048e565b60405161013691906117d4565b60405180910390f35b34801561014b57600080fd5b5061016660048036038101906101619190611879565b61049b565b005b34801561017457600080fd5b5061017d610536565b60405161018b9291906118da565b60405180910390f35b3480156101a057600080fd5b506101bb60048036038101906101b69190611927565b610568565b6040516101c9929190611a00565b60405180910390f35b3480156101de57600080fd5b506101f960048036038101906101f49190611a6e565b61084e565b005b34801561020757600080fd5b5061021061089a565b005b34801561021e57600080fd5b5061023960048036038101906102349190611aba565b6108ae565b005b34801561024757600080fd5b506102506108cb565b60405161025d9190611ae7565b60405180910390f35b34801561027257600080fd5b5061028d60048036038101906102889190611b8c565b6108f4565b005b34801561029b57600080fd5b506102a461090e565b6040516102b19190611c5f565b60405180910390f35b3480156102c657600080fd5b506102cf610934565b005b3480156102dd57600080fd5b506102f860048036038101906102f39190611c7a565b6109c0565b005b34801561030657600080fd5b5061030f610a58565b60405161031c91906117d4565b60405180910390f35b61032d610afb565b005b34801561033b57600080fd5b5061035660048036038101906103519190611cd3565b610b8b565b005b610360610c0e565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630396cb603483600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663390b99786040518163ffffffff1660e01b81526004016020604051808303816000875af115801561040f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104339190611d15565b61043d9190611d71565b6040518363ffffffff1660e01b81526004016104599190611db8565b6000604051808303818588803b15801561047257600080fd5b505af1158015610486573d6000803e3d6000fd5b505050505050565b6000600260010154905090565b6104a3610c0e565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663205c287883836040518363ffffffff1660e01b8152600401610500929190611de2565b600060405180830381600087803b15801561051a57600080fd5b505af115801561052e573d6000803e3d6000fd5b505050505050565b60028060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60606000610574610c8c565b8260a001358360800135146105be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b590611e68565b60405180910390fd5b60006105c861048e565b90506000848060c001906105dc9190611e97565b60149080926105ed93929190611f04565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600061064561064083610ce8565b610d16565b9050600061066d826000815181106106605761065f611f3f565b5b6020026020010151610e2b565b90504281116106b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a890611fba565b60405180910390fd5b60006106d7836001815181106106ca576106c9611f3f565b5b6020026020010151610e2b565b90506000610709610702856002815181106106f5576106f4611f3f565b5b6020026020010151610e85565b6020610f18565b9050600061073b6107348660038151811061072757610726611f3f565b5b6020026020010151610e85565b6020610f18565b9050600260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf32308a888888886040518863ffffffff1660e01b81526004016107a7979695949392919061200f565b600060405180830381600087803b1580156107c157600080fd5b505af11580156107d5573d6000803e3d6000fd5b5050505061082b323089600260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610fa9909392919063ffffffff16565b600060405180602001604052806000815250909850985050505050505050915091565b610856610c0e565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6108a2610c0e565b6108ac6000611032565b565b6108b6610c0e565b80600281816108c59190612203565b90505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6108fc610c8c565b610908848484846110f6565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61093c610c0e565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156109a657600080fd5b505af11580156109ba573d6000803e3d6000fd5b50505050565b6109c8610c0e565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c23a5cea826040518263ffffffff1660e01b8152600401610a239190612211565b600060405180830381600087803b158015610a3d57600080fd5b505af1158015610a51573d6000803e3d6000fd5b5050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ab59190611ae7565b602060405180830381865afa158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af69190612241565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b760faf934306040518363ffffffff1660e01b8152600401610b579190611ae7565b6000604051808303818588803b158015610b7057600080fd5b505af1158015610b84573d6000803e3d6000fd5b5050505050565b610b93610c0e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf9906122e0565b60405180910390fd5b610c0b81611032565b50565b610c16611131565b73ffffffffffffffffffffffffffffffffffffffff16610c346108cb565b73ffffffffffffffffffffffffffffffffffffffff1614610c8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c819061234c565b60405180910390fd5b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ce657600080fd5b565b610cf061172e565b600060208301905060405180604001604052808451815260200182815250915050919050565b6060610d2182611139565b610d2a57600080fd5b6000610d3583611186565b905060008167ffffffffffffffff811115610d5357610d5261236c565b5b604051908082528060200260200182016040528015610d8c57816020015b610d7961172e565b815260200190600190039081610d715790505b5090506000610d9e8560200151611213565b8560200151610dad919061239b565b9050600080600090505b84811015610e1e57610dc8836112d2565b9150604051806040016040528083815260200184815250848281518110610df257610df1611f3f565b5b60200260200101819052508183610e09919061239b565b92508080610e16906123cf565b915050610db7565b5082945050505050919050565b6000808260000151118015610e4557506021826000015111155b610e4e57600080fd5b600080610e5a846113ae565b915091506000825190506020821015610e7a57816020036101000a810490505b809350505050919050565b60606000826000015111610e9857600080fd5b600080610ea4846113ae565b9150915060008167ffffffffffffffff811115610ec457610ec361236c565b5b6040519080825280601f01601f191660200182016040528015610ef65781602001600182028036833780820191505090505b5090506000816020019050610f0c8482856113f8565b81945050505050919050565b60008060005b6020811015610f9e57600881610f349190612417565b60ff60f81b868387610f46919061239b565b81518110610f5757610f56611f3f565b5b602001015160f81c60f81b167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c821791508080610f96906123cf565b915050610f1e565b508091505092915050565b61102c846323b872dd60e01b858585604051602401610fca93929190612471565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061149a565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611128906124f4565b60405180910390fd5b600033905090565b60008082600001510361114f5760009050611181565b60008083602001519050805160001a915060c060ff168260ff16101561117a57600092505050611181565b6001925050505b919050565b60008082600001510361119c576000905061120e565b6000806111ac8460200151611213565b84602001516111bb919061239b565b90506000846000015185602001516111d3919061239b565b90505b80821015611207576111e7826112d2565b826111f2919061239b565b915082806111ff906123cf565b9350506111d6565b8293505050505b919050565b600080825160001a9050608060ff168110156112335760009150506112cd565b60b860ff16811080611258575060c060ff168110158015611257575060f860ff1681105b5b156112675760019150506112cd565b60c060ff168110156112a25760018060b86112829190612514565b60ff16826112909190612549565b61129a919061239b565b9150506112cd565b60018060f86112b19190612514565b60ff16826112bf9190612549565b6112c9919061239b565b9150505b919050565b6000806000835160001a9050608060ff168110156112f357600191506113a4565b60b860ff16811015611322576001608060ff16826113119190612549565b61131b919061239b565b91506113a3565b60c060ff168110156113525760b78103600185019450806020036101000a855104600182018101935050506113a2565b60f860ff1681101561138157600160c060ff16826113709190612549565b61137a919061239b565b91506113a1565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b60008060006113c08460200151611213565b905060008185602001516113d4919061239b565b905060008286600001516113e89190612549565b9050818194509450505050915091565b6000810315611495575b602060ff16811061144c5782518252602060ff1683611421919061239b565b9250602060ff1682611433919061239b565b9150602060ff16816114459190612549565b9050611402565b6000811115611494576000600182602060ff166114699190612549565b61010061147691906126b0565b6114809190612549565b905080198451168184511681811785525050505b5b505050565b60006114fc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115619092919063ffffffff16565b905060008151111561155c578080602001905181019061151c9190612733565b61155b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611552906127d2565b60405180910390fd5b5b505050565b60606115708484600085611579565b90509392505050565b6060824710156115be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b590612864565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516115e791906128c0565b60006040518083038185875af1925050503d8060008114611624576040519150601f19603f3d011682016040523d82523d6000602084013e611629565b606091505b509150915061163a87838387611646565b92505050949350505050565b606083156116a85760008351036116a057611660856116bb565b61169f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169690612923565b60405180910390fd5b5b8290506116b3565b6116b283836116de565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156116f15781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117259190612987565b60405180910390fd5b604051806040016040528060008152602001600081525090565b600080fd5b600080fd5b600063ffffffff82169050919050565b61176b81611752565b811461177657600080fd5b50565b60008135905061178881611762565b92915050565b6000602082840312156117a4576117a3611748565b5b60006117b284828501611779565b91505092915050565b6000819050919050565b6117ce816117bb565b82525050565b60006020820190506117e960008301846117c5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061181a826117ef565b9050919050565b61182a8161180f565b811461183557600080fd5b50565b60008135905061184781611821565b92915050565b611856816117bb565b811461186157600080fd5b50565b6000813590506118738161184d565b92915050565b600080604083850312156118905761188f611748565b5b600061189e85828601611838565b92505060206118af85828601611864565b9150509250929050565b60006118c4826117ef565b9050919050565b6118d4816118b9565b82525050565b60006040820190506118ef60008301856118cb565b6118fc60208301846117c5565b9392505050565b600080fd5b600060e0828403121561191e5761191d611903565b5b81905092915050565b60006020828403121561193d5761193c611748565b5b600082013567ffffffffffffffff81111561195b5761195a61174d565b5b61196784828501611908565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156119aa57808201518184015260208101905061198f565b60008484015250505050565b6000601f19601f8301169050919050565b60006119d282611970565b6119dc818561197b565b93506119ec81856020860161198c565b6119f5816119b6565b840191505092915050565b60006040820190508181036000830152611a1a81856119c7565b9050611a2960208301846117c5565b9392505050565b6000611a3b826118b9565b9050919050565b611a4b81611a30565b8114611a5657600080fd5b50565b600081359050611a6881611a42565b92915050565b600060208284031215611a8457611a83611748565b5b6000611a9284828501611a59565b91505092915050565b600060408284031215611ab157611ab0611903565b5b81905092915050565b600060408284031215611ad057611acf611748565b5b6000611ade84828501611a9b565b91505092915050565b6000602082019050611afc60008301846118cb565b92915050565b60038110611b0f57600080fd5b50565b600081359050611b2181611b02565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611b4c57611b4b611b27565b5b8235905067ffffffffffffffff811115611b6957611b68611b2c565b5b602083019150836001820283011115611b8557611b84611b31565b5b9250929050565b60008060008060608587031215611ba657611ba5611748565b5b6000611bb487828801611b12565b945050602085013567ffffffffffffffff811115611bd557611bd461174d565b5b611be187828801611b36565b93509350506040611bf487828801611864565b91505092959194509250565b6000819050919050565b6000611c25611c20611c1b846117ef565b611c00565b6117ef565b9050919050565b6000611c3782611c0a565b9050919050565b6000611c4982611c2c565b9050919050565b611c5981611c3e565b82525050565b6000602082019050611c746000830184611c50565b92915050565b600060208284031215611c9057611c8f611748565b5b6000611c9e84828501611838565b91505092915050565b611cb0816118b9565b8114611cbb57600080fd5b50565b600081359050611ccd81611ca7565b92915050565b600060208284031215611ce957611ce8611748565b5b6000611cf784828501611cbe565b91505092915050565b600081519050611d0f81611762565b92915050565b600060208284031215611d2b57611d2a611748565b5b6000611d3984828501611d00565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d7c82611752565b9150611d8783611752565b9250828201905063ffffffff811115611da357611da2611d42565b5b92915050565b611db281611752565b82525050565b6000602082019050611dcd6000830184611da9565b92915050565b611ddc8161180f565b82525050565b6000604082019050611df76000830185611dd3565b611e0460208301846117c5565b9392505050565b600082825260208201905092915050565b7f47503a205553454c4553535f434845434b000000000000000000000000000000600082015250565b6000611e52601183611e0b565b9150611e5d82611e1c565b602082019050919050565b60006020820190508181036000830152611e8181611e45565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611eb457611eb3611e88565b5b80840192508235915067ffffffffffffffff821115611ed657611ed5611e8d565b5b602083019250600182023603831315611ef257611ef1611e92565b5b509250929050565b600080fd5b600080fd5b60008085851115611f1857611f17611efa565b5b83861115611f2957611f28611eff565b5b6001850283019150848603905094509492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f47503a2057524f4e475f444541444c494e450000000000000000000000000000600082015250565b6000611fa4601283611e0b565b9150611faf82611f6e565b602082019050919050565b60006020820190508181036000830152611fd381611f97565b9050919050565b600060ff82169050919050565b611ff081611fda565b82525050565b6000819050919050565b61200981611ff6565b82525050565b600060e082019050612024600083018a6118cb565b61203160208301896118cb565b61203e60408301886117c5565b61204b60608301876117c5565b6120586080830186611fe7565b61206560a0830185612000565b61207260c0830184612000565b98975050505050505050565b6000813561208b81611ca7565b80915050919050565b60008160001b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff6120c184612094565b9350801983169250808416831791505092915050565b60006120e282611c2c565b9050919050565b6000819050919050565b6120fc826120d7565b61210f612108826120e9565b83546120a1565b8255505050565b600081356121238161184d565b80915050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61215884612094565b9350801983169250808416831791505092915050565b600061218961218461217f846117bb565b611c00565b6117bb565b9050919050565b6000819050919050565b6121a38261216e565b6121b66121af82612190565b835461212c565b8255505050565b6000810160008301806121cf8161207e565b90506121db81846120f3565b5050506001810160208301806121f081612116565b90506121fc818461219a565b5050505050565b61220d82826121bd565b5050565b60006020820190506122266000830184611dd3565b92915050565b60008151905061223b8161184d565b92915050565b60006020828403121561225757612256611748565b5b60006122658482850161222c565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006122ca602683611e0b565b91506122d58261226e565b604082019050919050565b600060208201905081810360008301526122f9816122bd565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612336602083611e0b565b915061234182612300565b602082019050919050565b6000602082019050818103600083015261236581612329565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006123a6826117bb565b91506123b1836117bb565b92508282019050808211156123c9576123c8611d42565b5b92915050565b60006123da826117bb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361240c5761240b611d42565b5b600182019050919050565b6000612422826117bb565b915061242d836117bb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561246657612465611d42565b5b828202905092915050565b600060608201905061248660008301866118cb565b61249360208301856118cb565b6124a060408301846117c5565b949350505050565b7f6d757374206f7665727269646500000000000000000000000000000000000000600082015250565b60006124de600d83611e0b565b91506124e9826124a8565b602082019050919050565b6000602082019050818103600083015261250d816124d1565b9050919050565b600061251f82611fda565b915061252a83611fda565b9250828203905060ff81111561254357612542611d42565b5b92915050565b6000612554826117bb565b915061255f836117bb565b925082820390508181111561257757612576611d42565b5b92915050565b60008160011c9050919050565b6000808291508390505b60018511156125d4578086048111156125b0576125af611d42565b5b60018516156125bf5780820291505b80810290506125cd8561257d565b9450612594565b94509492505050565b6000826125ed57600190506126a9565b816125fb57600090506126a9565b8160018114612611576002811461261b5761264a565b60019150506126a9565b60ff84111561262d5761262c611d42565b5b8360020a91508482111561264457612643611d42565b5b506126a9565b5060208310610133831016604e8410600b841016171561267f5782820a90508381111561267a57612679611d42565b5b6126a9565b61268c848484600161258a565b925090508184048111156126a3576126a2611d42565b5b81810290505b9392505050565b60006126bb826117bb565b91506126c6836117bb565b92506126f37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846125dd565b905092915050565b60008115159050919050565b612710816126fb565b811461271b57600080fd5b50565b60008151905061272d81612707565b92915050565b60006020828403121561274957612748611748565b5b60006127578482850161271e565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006127bc602a83611e0b565b91506127c782612760565b604082019050919050565b600060208201905081810360008301526127eb816127af565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061284e602683611e0b565b9150612859826127f2565b604082019050919050565b6000602082019050818103600083015261287d81612841565b9050919050565b600081905092915050565b600061289a82611970565b6128a48185612884565b93506128b481856020860161198c565b80840191505092915050565b60006128cc828461288f565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061290d601d83611e0b565b9150612918826128d7565b602082019050919050565b6000602082019050818103600083015261293c81612900565b9050919050565b600081519050919050565b600061295982612943565b6129638185611e0b565b935061297381856020860161198c565b61297c816119b6565b840191505092915050565b600060208201905081810360008301526129a1818461294e565b90509291505056fea2646970667358221220aaef13bdd1ad1e6436acf1ba2738b2442f4dee69d425d950d187ba2e993b0cfe64736f6c63430008100033",
  "deployedBytecode": "0x6080604052600436106100f35760003560e01c80638da5cb5b1161008a578063c23a5cea11610059578063c23a5cea146102d1578063c399ec88146102fa578063d0e30db014610325578063f2fde38b1461032f576100f3565b80638da5cb5b1461023b578063a9a2340914610266578063b0d691fe1461028f578063bb9fe6bf146102ba576100f3565b8063321a1567116100c6578063321a156714610194578063584465f2146101d2578063715018a6146101fb578063772dbdf714610212576100f3565b80630396cb60146100f857806306ffce5314610114578063205c28781461013f5780633013ce2914610168575b600080fd5b610112600480360381019061010d919061178e565b610358565b005b34801561012057600080fd5b5061012961048e565b60405161013691906117d4565b60405180910390f35b34801561014b57600080fd5b5061016660048036038101906101619190611879565b61049b565b005b34801561017457600080fd5b5061017d610536565b60405161018b9291906118da565b60405180910390f35b3480156101a057600080fd5b506101bb60048036038101906101b69190611927565b610568565b6040516101c9929190611a00565b60405180910390f35b3480156101de57600080fd5b506101f960048036038101906101f49190611a6e565b61084e565b005b34801561020757600080fd5b5061021061089a565b005b34801561021e57600080fd5b5061023960048036038101906102349190611aba565b6108ae565b005b34801561024757600080fd5b506102506108cb565b60405161025d9190611ae7565b60405180910390f35b34801561027257600080fd5b5061028d60048036038101906102889190611b8c565b6108f4565b005b34801561029b57600080fd5b506102a461090e565b6040516102b19190611c5f565b60405180910390f35b3480156102c657600080fd5b506102cf610934565b005b3480156102dd57600080fd5b506102f860048036038101906102f39190611c7a565b6109c0565b005b34801561030657600080fd5b5061030f610a58565b60405161031c91906117d4565b60405180910390f35b61032d610afb565b005b34801561033b57600080fd5b5061035660048036038101906103519190611cd3565b610b8b565b005b610360610c0e565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16630396cb603483600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663390b99786040518163ffffffff1660e01b81526004016020604051808303816000875af115801561040f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104339190611d15565b61043d9190611d71565b6040518363ffffffff1660e01b81526004016104599190611db8565b6000604051808303818588803b15801561047257600080fd5b505af1158015610486573d6000803e3d6000fd5b505050505050565b6000600260010154905090565b6104a3610c0e565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663205c287883836040518363ffffffff1660e01b8152600401610500929190611de2565b600060405180830381600087803b15801561051a57600080fd5b505af115801561052e573d6000803e3d6000fd5b505050505050565b60028060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60606000610574610c8c565b8260a001358360800135146105be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b590611e68565b60405180910390fd5b60006105c861048e565b90506000848060c001906105dc9190611e97565b60149080926105ed93929190611f04565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509050600061064561064083610ce8565b610d16565b9050600061066d826000815181106106605761065f611f3f565b5b6020026020010151610e2b565b90504281116106b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a890611fba565b60405180910390fd5b60006106d7836001815181106106ca576106c9611f3f565b5b6020026020010151610e2b565b90506000610709610702856002815181106106f5576106f4611f3f565b5b6020026020010151610e85565b6020610f18565b9050600061073b6107348660038151811061072757610726611f3f565b5b6020026020010151610e85565b6020610f18565b9050600260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663d505accf32308a888888886040518863ffffffff1660e01b81526004016107a7979695949392919061200f565b600060405180830381600087803b1580156107c157600080fd5b505af11580156107d5573d6000803e3d6000fd5b5050505061082b323089600260000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16610fa9909392919063ffffffff16565b600060405180602001604052806000815250909850985050505050505050915091565b610856610c0e565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6108a2610c0e565b6108ac6000611032565b565b6108b6610c0e565b80600281816108c59190612203565b90505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6108fc610c8c565b610908848484846110f6565b50505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b61093c610c0e565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bb9fe6bf6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156109a657600080fd5b505af11580156109ba573d6000803e3d6000fd5b50505050565b6109c8610c0e565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c23a5cea826040518263ffffffff1660e01b8152600401610a239190612211565b600060405180830381600087803b158015610a3d57600080fd5b505af1158015610a51573d6000803e3d6000fd5b5050505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610ab59190611ae7565b602060405180830381865afa158015610ad2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610af69190612241565b905090565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b760faf934306040518363ffffffff1660e01b8152600401610b579190611ae7565b6000604051808303818588803b158015610b7057600080fd5b505af1158015610b84573d6000803e3d6000fd5b5050505050565b610b93610c0e565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610c02576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf9906122e0565b60405180910390fd5b610c0b81611032565b50565b610c16611131565b73ffffffffffffffffffffffffffffffffffffffff16610c346108cb565b73ffffffffffffffffffffffffffffffffffffffff1614610c8a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c819061234c565b60405180910390fd5b565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ce657600080fd5b565b610cf061172e565b600060208301905060405180604001604052808451815260200182815250915050919050565b6060610d2182611139565b610d2a57600080fd5b6000610d3583611186565b905060008167ffffffffffffffff811115610d5357610d5261236c565b5b604051908082528060200260200182016040528015610d8c57816020015b610d7961172e565b815260200190600190039081610d715790505b5090506000610d9e8560200151611213565b8560200151610dad919061239b565b9050600080600090505b84811015610e1e57610dc8836112d2565b9150604051806040016040528083815260200184815250848281518110610df257610df1611f3f565b5b60200260200101819052508183610e09919061239b565b92508080610e16906123cf565b915050610db7565b5082945050505050919050565b6000808260000151118015610e4557506021826000015111155b610e4e57600080fd5b600080610e5a846113ae565b915091506000825190506020821015610e7a57816020036101000a810490505b809350505050919050565b60606000826000015111610e9857600080fd5b600080610ea4846113ae565b9150915060008167ffffffffffffffff811115610ec457610ec361236c565b5b6040519080825280601f01601f191660200182016040528015610ef65781602001600182028036833780820191505090505b5090506000816020019050610f0c8482856113f8565b81945050505050919050565b60008060005b6020811015610f9e57600881610f349190612417565b60ff60f81b868387610f46919061239b565b81518110610f5757610f56611f3f565b5b602001015160f81c60f81b167effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916901c821791508080610f96906123cf565b915050610f1e565b508091505092915050565b61102c846323b872dd60e01b858585604051602401610fca93929190612471565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061149a565b50505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611128906124f4565b60405180910390fd5b600033905090565b60008082600001510361114f5760009050611181565b60008083602001519050805160001a915060c060ff168260ff16101561117a57600092505050611181565b6001925050505b919050565b60008082600001510361119c576000905061120e565b6000806111ac8460200151611213565b84602001516111bb919061239b565b90506000846000015185602001516111d3919061239b565b90505b80821015611207576111e7826112d2565b826111f2919061239b565b915082806111ff906123cf565b9350506111d6565b8293505050505b919050565b600080825160001a9050608060ff168110156112335760009150506112cd565b60b860ff16811080611258575060c060ff168110158015611257575060f860ff1681105b5b156112675760019150506112cd565b60c060ff168110156112a25760018060b86112829190612514565b60ff16826112909190612549565b61129a919061239b565b9150506112cd565b60018060f86112b19190612514565b60ff16826112bf9190612549565b6112c9919061239b565b9150505b919050565b6000806000835160001a9050608060ff168110156112f357600191506113a4565b60b860ff16811015611322576001608060ff16826113119190612549565b61131b919061239b565b91506113a3565b60c060ff168110156113525760b78103600185019450806020036101000a855104600182018101935050506113a2565b60f860ff1681101561138157600160c060ff16826113709190612549565b61137a919061239b565b91506113a1565b60f78103600185019450806020036101000a855104600182018101935050505b5b5b5b8192505050919050565b60008060006113c08460200151611213565b905060008185602001516113d4919061239b565b905060008286600001516113e89190612549565b9050818194509450505050915091565b6000810315611495575b602060ff16811061144c5782518252602060ff1683611421919061239b565b9250602060ff1682611433919061239b565b9150602060ff16816114459190612549565b9050611402565b6000811115611494576000600182602060ff166114699190612549565b61010061147691906126b0565b6114809190612549565b905080198451168184511681811785525050505b5b505050565b60006114fc826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166115619092919063ffffffff16565b905060008151111561155c578080602001905181019061151c9190612733565b61155b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611552906127d2565b60405180910390fd5b5b505050565b60606115708484600085611579565b90509392505050565b6060824710156115be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115b590612864565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516115e791906128c0565b60006040518083038185875af1925050503d8060008114611624576040519150601f19603f3d011682016040523d82523d6000602084013e611629565b606091505b509150915061163a87838387611646565b92505050949350505050565b606083156116a85760008351036116a057611660856116bb565b61169f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161169690612923565b60405180910390fd5b5b8290506116b3565b6116b283836116de565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000825111156116f15781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117259190612987565b60405180910390fd5b604051806040016040528060008152602001600081525090565b600080fd5b600080fd5b600063ffffffff82169050919050565b61176b81611752565b811461177657600080fd5b50565b60008135905061178881611762565b92915050565b6000602082840312156117a4576117a3611748565b5b60006117b284828501611779565b91505092915050565b6000819050919050565b6117ce816117bb565b82525050565b60006020820190506117e960008301846117c5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061181a826117ef565b9050919050565b61182a8161180f565b811461183557600080fd5b50565b60008135905061184781611821565b92915050565b611856816117bb565b811461186157600080fd5b50565b6000813590506118738161184d565b92915050565b600080604083850312156118905761188f611748565b5b600061189e85828601611838565b92505060206118af85828601611864565b9150509250929050565b60006118c4826117ef565b9050919050565b6118d4816118b9565b82525050565b60006040820190506118ef60008301856118cb565b6118fc60208301846117c5565b9392505050565b600080fd5b600060e0828403121561191e5761191d611903565b5b81905092915050565b60006020828403121561193d5761193c611748565b5b600082013567ffffffffffffffff81111561195b5761195a61174d565b5b61196784828501611908565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156119aa57808201518184015260208101905061198f565b60008484015250505050565b6000601f19601f8301169050919050565b60006119d282611970565b6119dc818561197b565b93506119ec81856020860161198c565b6119f5816119b6565b840191505092915050565b60006040820190508181036000830152611a1a81856119c7565b9050611a2960208301846117c5565b9392505050565b6000611a3b826118b9565b9050919050565b611a4b81611a30565b8114611a5657600080fd5b50565b600081359050611a6881611a42565b92915050565b600060208284031215611a8457611a83611748565b5b6000611a9284828501611a59565b91505092915050565b600060408284031215611ab157611ab0611903565b5b81905092915050565b600060408284031215611ad057611acf611748565b5b6000611ade84828501611a9b565b91505092915050565b6000602082019050611afc60008301846118cb565b92915050565b60038110611b0f57600080fd5b50565b600081359050611b2181611b02565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f840112611b4c57611b4b611b27565b5b8235905067ffffffffffffffff811115611b6957611b68611b2c565b5b602083019150836001820283011115611b8557611b84611b31565b5b9250929050565b60008060008060608587031215611ba657611ba5611748565b5b6000611bb487828801611b12565b945050602085013567ffffffffffffffff811115611bd557611bd461174d565b5b611be187828801611b36565b93509350506040611bf487828801611864565b91505092959194509250565b6000819050919050565b6000611c25611c20611c1b846117ef565b611c00565b6117ef565b9050919050565b6000611c3782611c0a565b9050919050565b6000611c4982611c2c565b9050919050565b611c5981611c3e565b82525050565b6000602082019050611c746000830184611c50565b92915050565b600060208284031215611c9057611c8f611748565b5b6000611c9e84828501611838565b91505092915050565b611cb0816118b9565b8114611cbb57600080fd5b50565b600081359050611ccd81611ca7565b92915050565b600060208284031215611ce957611ce8611748565b5b6000611cf784828501611cbe565b91505092915050565b600081519050611d0f81611762565b92915050565b600060208284031215611d2b57611d2a611748565b5b6000611d3984828501611d00565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611d7c82611752565b9150611d8783611752565b9250828201905063ffffffff811115611da357611da2611d42565b5b92915050565b611db281611752565b82525050565b6000602082019050611dcd6000830184611da9565b92915050565b611ddc8161180f565b82525050565b6000604082019050611df76000830185611dd3565b611e0460208301846117c5565b9392505050565b600082825260208201905092915050565b7f47503a205553454c4553535f434845434b000000000000000000000000000000600082015250565b6000611e52601183611e0b565b9150611e5d82611e1c565b602082019050919050565b60006020820190508181036000830152611e8181611e45565b9050919050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112611eb457611eb3611e88565b5b80840192508235915067ffffffffffffffff821115611ed657611ed5611e8d565b5b602083019250600182023603831315611ef257611ef1611e92565b5b509250929050565b600080fd5b600080fd5b60008085851115611f1857611f17611efa565b5b83861115611f2957611f28611eff565b5b6001850283019150848603905094509492505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f47503a2057524f4e475f444541444c494e450000000000000000000000000000600082015250565b6000611fa4601283611e0b565b9150611faf82611f6e565b602082019050919050565b60006020820190508181036000830152611fd381611f97565b9050919050565b600060ff82169050919050565b611ff081611fda565b82525050565b6000819050919050565b61200981611ff6565b82525050565b600060e082019050612024600083018a6118cb565b61203160208301896118cb565b61203e60408301886117c5565b61204b60608301876117c5565b6120586080830186611fe7565b61206560a0830185612000565b61207260c0830184612000565b98975050505050505050565b6000813561208b81611ca7565b80915050919050565b60008160001b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff6120c184612094565b9350801983169250808416831791505092915050565b60006120e282611c2c565b9050919050565b6000819050919050565b6120fc826120d7565b61210f612108826120e9565b83546120a1565b8255505050565b600081356121238161184d565b80915050919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff61215884612094565b9350801983169250808416831791505092915050565b600061218961218461217f846117bb565b611c00565b6117bb565b9050919050565b6000819050919050565b6121a38261216e565b6121b66121af82612190565b835461212c565b8255505050565b6000810160008301806121cf8161207e565b90506121db81846120f3565b5050506001810160208301806121f081612116565b90506121fc818461219a565b5050505050565b61220d82826121bd565b5050565b60006020820190506122266000830184611dd3565b92915050565b60008151905061223b8161184d565b92915050565b60006020828403121561225757612256611748565b5b60006122658482850161222c565b91505092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006122ca602683611e0b565b91506122d58261226e565b604082019050919050565b600060208201905081810360008301526122f9816122bd565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612336602083611e0b565b915061234182612300565b602082019050919050565b6000602082019050818103600083015261236581612329565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60006123a6826117bb565b91506123b1836117bb565b92508282019050808211156123c9576123c8611d42565b5b92915050565b60006123da826117bb565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361240c5761240b611d42565b5b600182019050919050565b6000612422826117bb565b915061242d836117bb565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561246657612465611d42565b5b828202905092915050565b600060608201905061248660008301866118cb565b61249360208301856118cb565b6124a060408301846117c5565b949350505050565b7f6d757374206f7665727269646500000000000000000000000000000000000000600082015250565b60006124de600d83611e0b565b91506124e9826124a8565b602082019050919050565b6000602082019050818103600083015261250d816124d1565b9050919050565b600061251f82611fda565b915061252a83611fda565b9250828203905060ff81111561254357612542611d42565b5b92915050565b6000612554826117bb565b915061255f836117bb565b925082820390508181111561257757612576611d42565b5b92915050565b60008160011c9050919050565b6000808291508390505b60018511156125d4578086048111156125b0576125af611d42565b5b60018516156125bf5780820291505b80810290506125cd8561257d565b9450612594565b94509492505050565b6000826125ed57600190506126a9565b816125fb57600090506126a9565b8160018114612611576002811461261b5761264a565b60019150506126a9565b60ff84111561262d5761262c611d42565b5b8360020a91508482111561264457612643611d42565b5b506126a9565b5060208310610133831016604e8410600b841016171561267f5782820a90508381111561267a57612679611d42565b5b6126a9565b61268c848484600161258a565b925090508184048111156126a3576126a2611d42565b5b81810290505b9392505050565b60006126bb826117bb565b91506126c6836117bb565b92506126f37fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846125dd565b905092915050565b60008115159050919050565b612710816126fb565b811461271b57600080fd5b50565b60008151905061272d81612707565b92915050565b60006020828403121561274957612748611748565b5b60006127578482850161271e565b91505092915050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006127bc602a83611e0b565b91506127c782612760565b604082019050919050565b600060208201905081810360008301526127eb816127af565b9050919050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b600061284e602683611e0b565b9150612859826127f2565b604082019050919050565b6000602082019050818103600083015261287d81612841565b9050919050565b600081905092915050565b600061289a82611970565b6128a48185612884565b93506128b481856020860161198c565b80840191505092915050565b60006128cc828461288f565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b600061290d601d83611e0b565b9150612918826128d7565b602082019050919050565b6000602082019050818103600083015261293c81612900565b9050919050565b600081519050919050565b600061295982612943565b6129638185611e0b565b935061297381856020860161198c565b61297c816119b6565b840191505092915050565b600060208201905081810360008301526129a1818461294e565b90509291505056fea2646970667358221220aaef13bdd1ad1e6436acf1ba2738b2442f4dee69d425d950d187ba2e993b0cfe64736f6c63430008100033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addStake(uint32)": {
        "params": {
          "extraUnstakeDelaySec": "- set the stake to the entrypoint's default unstakeDelay plus this value."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "postOp(uint8,bytes,uint256)": {
        "params": {
          "actualGasCost": "- actual gas used so far (without this postOp call).",
          "context": "- the context value returned by validatePaymasterUserOp",
          "mode": "enum with the following options:      opSucceeded - user operation succeeded.      opReverted  - user op reverted. still has to pay for gas.      postOpReverted - user op succeeded, but caused postOp (in mode=opSucceeded) to revert.                       Now this is the 2nd call, after user's op was deliberately reverted."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdrawStake(address)": {
        "params": {
          "withdrawAddress": "the address to send withdrawn value."
        }
      },
      "withdrawTo(address,uint256)": {
        "params": {
          "amount": "to withdraw",
          "withdrawAddress": "target to send to"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addStake(uint32)": {
        "notice": "add stake for this paymaster. This method can also carry eth value to add to the current stake."
      },
      "deposit()": {
        "notice": "add a deposit for this paymaster, used for paying for transaction fees"
      },
      "getDeposit()": {
        "notice": "return current paymaster's deposit on the entryPoint."
      },
      "postOp(uint8,bytes,uint256)": {
        "notice": "post-operation handler. Must verify sender is the entryPoint"
      },
      "unlockStake()": {
        "notice": "unlock the stake, in order to withdraw it. The paymaster can't serve requests once unlocked, until it calls addStake again"
      },
      "validatePaymasterUserOp((address,bytes,uint256,uint256,uint256,uint256,bytes))": {
        "notice": "verify our external signer signed this request. the \"paymasterAndData\" is expected to be the paymaster and a signature over the entire request params"
      },
      "withdrawStake(address)": {
        "notice": "withdraw the entire paymaster's stake. stake must be unlocked first (and then wait for the unstakeDelay to be over)"
      },
      "withdrawTo(address,uint256)": {
        "notice": "withdraw value from the deposit"
      }
    },
    "notice": "A sample paymaster that uses external service to decide whether to pay for the UserOp. The paymaster trusts an external signer to sign the transaction. The calling user must pass the UserOp to that external signer first, which performs whatever off-chain verification before signing the UserOp. Note that this signature is NOT a replacement for wallet signature: - the paymaster signs to agree to PAY for GAS. - the wallet signs to prove identity and wallet ownership.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/GaslessERC20Paymaster.sol:GaslessERC20Paymaster",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2273,
        "contract": "contracts/GaslessERC20Paymaster.sol:GaslessERC20Paymaster",
        "label": "entryPoint",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IGaslessEntryPoint)2847"
      },
      {
        "astId": 2502,
        "contract": "contracts/GaslessERC20Paymaster.sol:GaslessERC20Paymaster",
        "label": "paymentToken",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(PaymentToken)2499_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IGaslessEntryPoint)2847": {
        "encoding": "inplace",
        "label": "contract IGaslessEntryPoint",
        "numberOfBytes": "20"
      },
      "t_struct(PaymentToken)2499_storage": {
        "encoding": "inplace",
        "label": "struct GaslessERC20Paymaster.PaymentToken",
        "members": [
          {
            "astId": 2496,
            "contract": "contracts/GaslessERC20Paymaster.sol:GaslessERC20Paymaster",
            "label": "token",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2498,
            "contract": "contracts/GaslessERC20Paymaster.sol:GaslessERC20Paymaster",
            "label": "rate",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}